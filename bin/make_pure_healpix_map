#!/usr/bin/env python

import argparse
import fitsio
from LSS.imaging.sky_maps import pure_healpix_map, pure_healpix_map_filename, \
    write_atomically

# ADM a default HEALPixel size for output maps.
mapnside = 8192

desc = ("Create a sky map purely by sampling maps and Legacy Surveys stacks, "
        "at RA/Dec locations corresponding to (nested) HEALPixel centers")

ap = argparse.ArgumentParser(description=desc)
ap.add_argument("drdir",
                help=("Root directory of a Legacy Surveys Data Release, "
                      "e.g. /global/cfs/cdirs/cosmo/data/legacysurvey/dr9."))
ap.add_argument("outdir",
                help=("The root output directory, e.g. $SCRATCH."))
ap.add_argument("nsideproc", type=int,
                help="Resolution (HEALPixel nside) at which to process the map.")
ap.add_argument("hpxproc", type=int,
                help="HEALPixel number in which to process the map.")
ap.add_argument("--nside", type=int, default=mapnside,
                help=("Underlying resolution (HEALPixel nside) of output map"
                      " (optional, defaults to [{}]).".format(mapnside)))
ap.add_argument("--numproc", type=int, default=1,
                help=("The number of processes over which to parallelize"
                      " (optional, defaults to [1])."))

ns = ap.parse_args()

# ADM make the output sky map.
outmap = pure_healpix_map(ns.drdir, ns.nsideproc, ns.hpxproc,
                          nside=ns.nside, numproc=ns.numproc)

# ADM build the output filename.
outfn = pure_healpix_map_filename(ns.outdir, ns.nsideproc, ns.hpxproc)

# ADM write the file.
hdr = fitsio.FITSHDR()
hdr["FILENSID"] = ns.nsideproc
hdr["FILENEST"] = True
hdr["FILEHPX"] = ns.hpxproc
hdr["MAPNSIDE"] = ns.nside
write_atomically(outfn, outmap, extname='PHEALMAP', header=hdr)
